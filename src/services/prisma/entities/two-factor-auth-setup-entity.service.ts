// # This file was generated by a custom script for Prisma entity service setup.
// # Do not modify this file directly, as changes may be overwritten.

import { Injectable } from '@nestjs/common';
import { PrismaService } from '../prisma.service';
import type { TwoFactorAuthSetup, Prisma } from '@prisma/client';
import { EventEmitter2 } from '@nestjs/event-emitter';

@Injectable()
export class TwoFactorAuthSetupEntityService {
  constructor(
    private readonly prisma: PrismaService,
    private readonly events: EventEmitter2
  ) {}

  /**
   * Get a twoFactorAuthSetup by ID
   * @param id TwoFactorAuthSetup ID
   * @param options Additional Prisma findUnique options
   * @returns TwoFactorAuthSetup or null if not found
   */
  public async get(id: string, options: Omit<Prisma.TwoFactorAuthSetupFindUniqueArgs, 'where'> = {}): Promise<TwoFactorAuthSetup | null> {
    const twoFactorAuthSetup = await this.prisma.twoFactorAuthSetup.findUnique({ where: { id }, ...options });

    if (twoFactorAuthSetup) this.events.emit('entity.twoFactorAuthSetup.accessed.single', twoFactorAuthSetup, { where: { id }, ...options });

    return twoFactorAuthSetup;
  }

  /**
   * Find a twoFactorAuthSetup by criteria
   * @param where Search criteria
   * @param options Additional Prisma findFirst options
   * @returns TwoFactorAuthSetup or null if not found
   */
  public async find(
    where: Prisma.TwoFactorAuthSetupWhereInput = {},
    options: Omit<Prisma.TwoFactorAuthSetupFindFirstArgs, 'where'> = {}
  ): Promise<TwoFactorAuthSetup | null> {
    const twoFactorAuthSetup = await this.prisma.twoFactorAuthSetup.findFirst({ where, ...options });

    if (twoFactorAuthSetup) this.events.emit('entity.twoFactorAuthSetup.accessed.single', twoFactorAuthSetup, { where, ...options });

    return twoFactorAuthSetup;
  }

  /**
   * Find multiple twoFactorAuthSetups by criteria
   * @param where Search criteria
   * @param options Additional Prisma findMany options
   * @returns Array of twoFactorAuthSetups
   */
  public async findMany(
    where: Prisma.TwoFactorAuthSetupWhereInput = {},
    options: Omit<Prisma.TwoFactorAuthSetupFindManyArgs, 'where'> = {}
  ): Promise<TwoFactorAuthSetup[]> {
    const twoFactorAuthSetups = await this.prisma.twoFactorAuthSetup.findMany({ where, ...options });

    if (twoFactorAuthSetups.length > 0) this.events.emit('entity.twoFactorAuthSetup.accessed.multiple', twoFactorAuthSetups, { where, ...options });

    return twoFactorAuthSetups;
  }

  /**
   * Create a new twoFactorAuthSetup
   * @param data TwoFactorAuthSetup data
   * @param options Additional Prisma create options
   * @returns Created twoFactorAuthSetup
   */
  public async create(data: Prisma.TwoFactorAuthSetupCreateInput, options: Omit<Prisma.TwoFactorAuthSetupCreateArgs, 'data'> = {}): Promise<TwoFactorAuthSetup> {
    const twoFactorAuthSetup = await this.prisma.twoFactorAuthSetup.create({ data, ...options });

    this.events.emit('entity.twoFactorAuthSetup.created.single', twoFactorAuthSetup, { data, ...options });

    return twoFactorAuthSetup;
  }

  /**
   * Create multiple twoFactorAuthSetups
   * @param data Array of twoFactorAuthSetup data
   * @param options Additional Prisma createMany options
   * @returns Batch payload with count of created records
   */
  public async createMany(
    data: Prisma.TwoFactorAuthSetupCreateManyInput[],
    options: Omit<Prisma.TwoFactorAuthSetupCreateManyArgs, 'data'> = {}
  ): Promise<Prisma.BatchPayload> {
    const twoFactorAuthSetups = await this.prisma.twoFactorAuthSetup.createMany({ data, ...options });

    this.events.emit('entity.twoFactorAuthSetup.created.multiple', twoFactorAuthSetups, { data, ...options });

    return twoFactorAuthSetups;
  }

  /**
   * Upsert a twoFactorAuthSetup (create or update)
   * @param where Unique criteria to find the twoFactorAuthSetup
   * @param createData Data to create if twoFactorAuthSetup does not exist
   * @param updateData Data to update if twoFactorAuthSetup exists
   * @param options Additional Prisma upsert options
   * @returns Upserted twoFactorAuthSetup
   */
  public async upsert(
    where: Prisma.TwoFactorAuthSetupWhereUniqueInput,
    createData: Prisma.TwoFactorAuthSetupCreateInput,
    updateData: Prisma.TwoFactorAuthSetupUpdateInput,
    options: Omit<Prisma.TwoFactorAuthSetupUpsertArgs, 'where' | 'create' | 'update'> = {}
  ): Promise<TwoFactorAuthSetup> {
    const twoFactorAuthSetup = await this.prisma.twoFactorAuthSetup.upsert({ where, create: createData, update: updateData, ...options });

    this.events.emit('entity.twoFactorAuthSetup.upserted', twoFactorAuthSetup, { where, create: createData, update: updateData, ...options });

    return twoFactorAuthSetup;
  }

  /**
   * Update a twoFactorAuthSetup by ID
   * @param id TwoFactorAuthSetup ID
   * @param data Data to update
   * @param options Additional Prisma update options
   * @returns Updated twoFactorAuthSetup
   */
  public async update(
    id: string,
    data: Prisma.TwoFactorAuthSetupUpdateInput,
    options: Omit<Prisma.TwoFactorAuthSetupUpdateArgs, 'where' | 'data'> = {}
  ): Promise<TwoFactorAuthSetup> {
    const twoFactorAuthSetup = await this.prisma.twoFactorAuthSetup.update({ where: { id }, data, ...options });

    this.events.emit('entity.twoFactorAuthSetup.updated.single', twoFactorAuthSetup, { id, data, ...options });

    return twoFactorAuthSetup;
  }

  /**
   * Update multiple twoFactorAuthSetups by criteria
   * @param where Criteria to select twoFactorAuthSetups to update
   * @param data Data to update
   * @param options Additional Prisma updateMany options
   * @returns Batch payload with count of updated records
   */
  public async updateMany(
    where: Prisma.TwoFactorAuthSetupWhereInput,
    data: Prisma.TwoFactorAuthSetupUpdateManyMutationInput,
    options: Omit<Prisma.TwoFactorAuthSetupUpdateManyArgs, 'where' | 'data'> = {}
  ): Promise<Prisma.BatchPayload> {
    const twoFactorAuthSetups = await this.prisma.twoFactorAuthSetup.updateMany({ where, data, ...options });

    this.events.emit('entity.twoFactorAuthSetup.updated.multiple', twoFactorAuthSetups, { where, data, ...options });

    return twoFactorAuthSetups;
  }

  /**
   * Delete a twoFactorAuthSetup by ID
   * @param id TwoFactorAuthSetup ID
   * @param options Additional Prisma delete options
   * @returns Deleted twoFactorAuthSetup
   */
  public async delete(id: string, options: Omit<Prisma.TwoFactorAuthSetupDeleteArgs, 'where'> = {}): Promise<TwoFactorAuthSetup> {
    const twoFactorAuthSetup = await this.prisma.twoFactorAuthSetup.delete({ where: { id }, ...options });

    this.events.emit('entity.twoFactorAuthSetup.deleted.single', twoFactorAuthSetup, { id, ...options });

    return twoFactorAuthSetup;
  }

  /**
   * Delete multiple twoFactorAuthSetups by criteria
   * @param where Criteria to select twoFactorAuthSetups to delete
   * @param options Additional Prisma deleteMany options
   * @returns Batch payload with count of deleted records
   */
  public async deleteMany(
    where: Prisma.TwoFactorAuthSetupWhereInput,
    options: Omit<Prisma.TwoFactorAuthSetupDeleteManyArgs, 'where'> = {}
  ): Promise<Prisma.BatchPayload> {
    const twoFactorAuthSetups = await this.prisma.twoFactorAuthSetup.deleteMany({ where, ...options });

    this.events.emit('entity.twoFactorAuthSetup.deleted.multiple', twoFactorAuthSetups, { where, ...options });

    return twoFactorAuthSetups;
  }

  /**
   * Aggregate twoFactorAuthSetups by criteria
   * @param where Criteria to filter twoFactorAuthSetups
   * @param options Prisma aggregate options (excluding 'where')
   * @returns Aggregated twoFactorAuthSetup data
   */
  public async aggregate(where: Prisma.TwoFactorAuthSetupWhereInput = {}, options: Omit<Prisma.TwoFactorAuthSetupAggregateArgs, 'where'> = {}) {
    const result = await this.prisma.twoFactorAuthSetup.aggregate({ where, ...options });

    this.events.emit('entity.twoFactorAuthSetup.aggregated', result, { where, ...options });

    return result;
  }

  /**
   * Count twoFactorAuthSetups by criteria
   * @param where Criteria to count twoFactorAuthSetups
   * @param options Additional Prisma count options
   * @returns Count of twoFactorAuthSetups matching criteria
   */
  public async count(where: Prisma.TwoFactorAuthSetupWhereInput = {}, options: Omit<Prisma.TwoFactorAuthSetupCountArgs, 'where'> = {}) {
    const count = await this.prisma.twoFactorAuthSetup.count({ where, ...options });

    this.events.emit('entity.twoFactorAuthSetup.counted', count, { where, ...options });

    return count;
  }
}
